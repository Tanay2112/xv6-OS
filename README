xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern x86-based multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)). See also http://pdos.csail.mit.edu/6.828/2012/v6.html, which
provides pointers to on-line resources for v6.

xv6 borrows code from the following sources:
    JOS (asm.h, elf.h, mmu.h, bootasm.S, ide.c, console.c, and others)
    Plan 9 (entryother.S, mp.h, mp.c, lapic.c)
    FreeBSD (ioapic.c)
    NetBSD (console.c)

The following people have made contributions:
    Russ Cox (context switching, locking)
    Cliff Frey (MP)
    Xiao Yu (MP)
    Nickolai Zeldovich
    Austin Clements

In addition, we are grateful for the patches contributed by Greg
Price, Yandong Mao, and Hitoshi Mitake.

The code in the files that constitute xv6 is
Copyright 2006-2012 Frans Kaashoek, Robert Morris, and Russ Cox.

ERROR REPORTS

If you spot errors or have suggestions for improvement, please send
email to Frans Kaashoek and Robert Morris (kaashoek,rtm@csail.mit.edu). 

BUILDING AND RUNNING XV6

To build xv6 on an x86 ELF machine (like Linux or FreeBSD), run "make".
On non-x86 or non-ELF machines (like OS X, even on x86), you will
need to install a cross-compiler gcc suite capable of producing x86 ELF
binaries.  See http://pdos.csail.mit.edu/6.828/2012/tools.html.
Then run "make TOOLPREFIX=i386-jos-elf-".

To run xv6, you can use the Bochs or QEMU PC simulators. Bochs makes
debugging easier, but QEMU is much faster. To run in Bochs, run "make
bochs" and then type "c" at the bochs prompt. To run in QEMU, run
"make qemu".

To create a typeset version of the code, run "make xv6.pdf".  This


PS PROJECT
Type man ps into a Unix system somewhere and read the documentation. Read it. Really, read it! Now relax, there is no need to implement all those command line options: we’ll simply print one fixed set of interesting values about each process. But you should become aware of all the stu a real Unix system keeps track of, xv6 is a lot simpler than that.

If you examine the source code for xv6 you’ll find the file proc.h
somewhere. In it, you find what we are looking for: struct proc
. When xv6 is running, all that information is around for each process, in the kernel
! Since ps is a user space program, it cannot access the process table in the kernel. In modern Unices, for example in Linux, the /proc
file system provides all the information to implement ps, but we don’t want to add a whole new file system to the kernel. Not yet anyway! Instead we’ll have to add the next best thing, a new system call. But before we get to that, let’s agree on the output ps
will make for each process. You’ll print the following pieces of information for each process, separated by two spaces each:
process id (as decimal integer)
parent process id (as decimal integer)
state (as string, all caps)
size (as decimal integer)
name (as string)
You’ll print one line for each process, but you don’t need to print a header at the top of the table. And that’s
it, that’s our output. Note that we left out some internals, but that’s okay: ps
is a user program after all.
Now, you will add just one system call. Your call will not always be able to print the correct information.
In C, the system call you need to add to xv6 has the following interface:
int getprocs(int max, struct uproc table[]); struct uproc is defined as (add it to proc.h or a new file):

struct uproc {
int pid;
int ppid;
enum procstate state;
uint sz;
char name[16];
};

Your ps program calls getprocs with an array of struct proc objects and sets max to the size of that
array (measured in struct uprocobjects). The kernel copies up to max entries into your array, starting at
the first slot of the array and filling it consecutively. The kernel returns the actual number of processes in
existence at that point in time, or -1 if there was an error.
The problem with this call is that if there are more processes than you have space for, you will miss
some. But then if you use the returned integer to allocate a new table and call again, some processes may
have died or (worse!) new ones may have been created in the meantime. So you’ll have to be lucky to get
the perfect listing.
